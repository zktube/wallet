package com.fictitious.money.purse.utils;


import android.content.Context;

public class XMHCoinUtitls {
    public static native boolean CoinID_generateMnemonicIndex(byte []entropyBuffer, byte byteCounter, byte []mnemonicIndexBuffer);
    public static native boolean CoinID_SetMaster(byte []mnemonicBuffer, short mnemonicLen);
    public static native boolean CoinID_DeriveEOSKeyRoot();
    public static native byte   CoinID_DeriveEOSKeyAccount(int index);
    public static native byte []CoinID_DeriveEOSKey(int index);
    public static native int  CoinID_ECDSA_sign(byte []msg, int length, byte []key, byte []sigData);
    public static native byte []CoinID_ExportEOSPubKey(byte []pubKey);
    public static native byte []CoinID_ExportEOSPrvKey(byte []prvKey);
    public static native boolean CoinID_ImportEOSPrvKeyCheck(byte []prvKey, byte length);
    public static native byte []CoinID_ImportEOSPrvKey(byte []prvKey, byte length);
    public static native byte []CoinID_GetTranSigJson(byte []jsonTran, short length, byte []prvKey);

    public static native boolean CoinID_EncKeyByAES128CBC(byte []input, short inputLen, byte []inputPIN, byte pinLen, byte []output, byte []uuid, byte len);
    public static native boolean CoinID_DecKeyByAES128CBC(byte []input, short inputLen, byte []inputPIN, byte pinLen, byte []output, byte []uuid, byte len);
    public static native boolean CoinID_DeriveETHKeyRoot();
    public static native byte []CoinID_DeriveETHKey(int index);
    public static native byte   CoinID_DeriveETHKeyAccount(int index);
    public static native byte []CoinID_ExportETHPubKey(byte []pubKey);
    public static native byte []CoinID_sigtEthTransaction(byte []p_nonce, short nonce_len, byte []p_gasprice, short gasprice_len, byte []p_startgas, short startgas_len, byte []to, byte []p_value, short value_len, byte []p_data, short data_len, byte []p_chainId, short chainId_len, byte []prvKey);
    public static native byte []CoinID_getMasterPubKey();
    public static native byte []CoinID_serializeTranJSON(byte []jsonTran, short length, byte []hash, byte []msgLength);
    public static native byte []CoinID_packTranJson(byte []sigData, byte []packData, int recid, short msgLen);
    public static native byte []CoinID_genBTCAddress(byte prefix, byte []pubKey, byte length, byte type);
    public static native byte []CoinID_sigtBTCTransaction(byte []jsonTran, short length, byte []prvKey);
    public static native byte []CoinID_ImportETHPrvKey(byte []prvKey);
    public static native boolean  CoinID_DeriveBTCKeyRoot();
    public static native boolean  CoinID_DeriveBTCKeyAccount(int index);
    public static native byte []CoinID_DeriveBTCKey(int index);
    public static native byte []CoinID_ImportBTCPrvKeyByWIF(byte []prvKey,short length);
    public static native byte []CoinID_ExportBTCPrvKeyByWIF(byte []prvKey);
    public static native byte []CoinID_genScriptHash(byte []address, short length);
    public static native byte []CoinID_serializeETHTranJSON(byte []p_nonce, short nonce_len, byte []p_gasprice, short gasprice_len, byte []p_startgas, short startgas_len, byte []to, byte []p_value, short value_len, byte []p_data, short data_len, byte []p_chainId, short chainId_len, byte []sigHash, byte []outLength);
    public static native byte []CoinID_packETHTranJson(byte []sigOut, byte []sigData, int recid, byte []p_chainId, short chainId_len, byte [] serLen);
    public static native byte []CoinID_serializeBTCTranJSON(byte []jsonTran, short length, byte []pubKey, byte []outLen);
    public static native byte []CoinID_packBTCTranJson(byte isSegwit, byte []sigData, int length, byte []pubKey);
    public static native boolean CoinID_checkMemoValid(short []memoIndexBuf,byte count);
    public static native void CoinID_genTrueRandom(byte []random);
    public static native void CoinID_authValidAPP(Context context);
    public static native boolean CoinID_EncByAES128CBC(byte []input, short inputLen, byte []inputKEY, byte []output);
    public static native short CoinID_DecByAES128CBC(byte []input, short inputLen, byte []inputKEY, byte []output);
    public static native void CoinID_genKeyPair(byte []prvKey, byte []pubKey);
    public static native void CoinID_keyAgreement(byte []prvKey, byte []pubKey, byte []output);
    public static native boolean CoinID_ECDSA_verify(byte []msg, int length, byte []sigData, byte []pubKey);
    public static native boolean  CoinID_DeriveKeyRoot(int coinType);
    public static native boolean  CoinID_DeriveKeyAccount(int index);
    public static native byte []CoinID_DeriveKey(int index);
    public static native byte []CoinID_getBYTOMAddress(byte []pubkey);
    public static native byte []CoinID_sigtBYTOMTransaction(byte []jsonTran, byte []prvKey);
    public static native byte []CoinID_serializeBYTOMTranJSON(byte []jsonTran, byte []outLen);
    public static native byte []CoinID_packBYTOMTranJson(byte []sigOut, short length);
    public static native byte []CoinID_importKeyStore(byte []json, byte []passwd, byte passLen, byte []outLen);
    public static native byte []CoinID_exportKeyStore(byte []prvKey, byte keyLen, byte type, byte []passwd, byte passLen, byte []salt, byte []iv, byte []uuid);
    public static native byte []CoinID_getBYTOMCode(byte []address);
    public static native byte []CoinID_ImportBYTOMPrvKey(byte []prvKey);
    public static native byte []CoinID_serializeTranJSONOnly(byte []jsonTran, byte []serLength);
    public static native byte []CoinID_packTranJsonOnly(byte []sigData, int recid);
    public static native byte []CoinID_serializeBTCTranJSONOnly(byte []jsonTran, byte []pubKey, byte []outLen);
    public static native byte []CoinID_packBTCTranJsonOnly(byte []sigData, int length, byte []pubKey);
    public static native byte []CoinID_serializeBYTOMTranJSONOnly(byte []jsonTran, byte []outLen);
    public static native byte []CoinID_packBYTOMTranJsonOnly(byte []sigOut, short length);
    public static native byte []CoinID_ImportPrvKeyByWIF(byte []prvKey, short length);
    public static native byte []CoinID_ExportPrvKeyByWIF(byte prefix, byte []prvKey);
    public static native byte []CoinID_getBCHAddress(byte []pubkey);
    public static native  String CoinID_sigETH_TX_by_str(String p_nonce, String p_gasprice, String p_startgas, String to, String p_value, String p_data, String p_chainId, String prvKey);
    public static native  String CoinID_serETH_TX_by_str(String p_nonce, String p_gasprice, String p_startgas, String to, String p_value, String p_data, String p_chainId, byte []sigHash);
    public static native  String CoinID_packETH_TX_by_str(String sigOut, String sigData, int recid, String p_chainId);
    public static native  boolean CoinID_checkETHpushValid(String pushStr,String to,String value,int decimal,boolean isContract,String contractAddr);
    public static native  boolean CoinID_SetMasterStandard(String mnemonicBuffer);
    public static native  String  CoinID_deriveKeyByPath(String path);
    public static native  String  CoinID_GetVersion();
    public static native  boolean CoinID_checkEOSpushValid(String pushStr, String to, String value, String unit);
    public static native  boolean CoinID_checkBTCpushValid(String pushStr, String to, String toValue, String from, String fromValue, String usdtValue, String coinType, boolean isSegwit);
    public static native  boolean CoinID_checkBYTOMpushValid(String pushStr, String to, String toValue, String from, String fromValue);
    public static native  String CoinID_SHA256(String input);
    public static native  boolean CoinID_checkAddressValid(String chainType,String address);
    public static native  boolean CoinID_checkCrossChain(String coinType, String pushStr, String contractAddr, String chainName,String tokenid, String account, String amout, int decimal,String unit);
    public static native  String CoinID_EncPhoneNum(String number);
    public static native  String CoinID_DecPhoneNum(String number);
    public static native  String CoinID_ExportEOSPubByPre(String prefix, String pubKey);
    public static native  String CoinID_cvtAddrByEIP55(String address);

    public static native  String CoinID_DeriveEOSKeyStr(int index);
    public static native  String CoinID_DeriveETHKeyStr(int index);
    public static native  String CoinID_ExportEOSPubKeyStr(String pubKey);
    public static native  String CoinID_ExportEOSPrvKeyStr(String prvKey);
    public static native  String CoinID_ParseEOSPubKeyStr(String pubKey);
    public static native  boolean CoinID_ImportEOSPrvKeyCheckStr(String prvKey);
    public static native  String CoinID_ImportEOSPrvKeyStr(String prvKey);
    public static native  String CoinID_GetTranSigJsonStr(String jsonTran, String prvKey);
    public static native  String CoinID_ExportETHPubKeyStr(String pubKey);
    public static native  String CoinID_getMasterPubKeyStr();
    public static native  String CoinID_serializeTranJSONStr(String jsonTran);
    public static native  String CoinID_packTranJsonStr(String sigData, int recid);
    public static native  String CoinID_genBTCAddressStr(byte prefix, String pubKey, byte type);
    public static native  String CoinID_sigtBTCTransactionStr(String jsonTran, String prvKey);
    public static native  String CoinID_ImportETHPrvKeyStr(String prvKey);
    public static native  String CoinID_DeriveBTCKeyStr(int index);
    public static native  String CoinID_ImportBTCPrvKeyByWIFStr(String prvKey);
    public static native  String CoinID_ExportBTCPrvKeyByWIFStr(String prvKey);
    public static native  String CoinID_genScriptHashStr(String address);
    public static native  String CoinID_serializeBTCTranJSONStr(String jsonTran, String pubKey);
    public static native  String CoinID_packBTCTranJsonStr(boolean isSegwit, String sigData, String pubKey);
    public static native  String CoinID_DeriveKeyStr(int index);
    public static native  String CoinID_getBYTOMAddressStr(String pubkey);
    public static native  String CoinID_sigtBYTOMTransactionStr(String jsonTran, String prvKey);
    public static native  String CoinID_serializeBYTOMTranJSONStr(String jsonTran);
    public static native  String CoinID_packBYTOMTranJsonStr(String sigOut);
    public static native  String CoinID_importKeyStoreStr(String json, String passwd);
    public static native  String CoinID_exportKeyStoreStr(String prvKey, byte type, String passwd, String salt, String iv, String uuid);
    public static native  String CoinID_getBYTOMCodeStr(String address);
    public static native  String CoinID_ImportBYTOMPrvKeyStr(String prvKey);
    public static native  String CoinID_serializeTranJSONOnlyStr(String jsonTran);
    public static native  String CoinID_packTranJsonOnlyStr(String sigData, int recid);
    public static native  String CoinID_serializeBTCTranJSONOnlyStr(String jsonTran, String pubKey);
    public static native  String CoinID_packBTCTranJsonOnlyStr(String sigData, String pubKey);
    public static native  String CoinID_serializeBYTOMTranJSONOnlyStr(String jsonTran);
    public static native  String CoinID_packBYTOMTranJsonOnlyStr(String sigOut);
    public static native  String CoinID_ImportPrvKeyByWIFStr(String prvKey);
    public static native  String CoinID_ExportPrvKeyByWIFStr(byte prefix, String prvKey);
    public static native  String CoinID_getBCHAddressStr(String pubkey);


    public static native  String CoinID_getBTMMultSigInfo(String jsonTran);
    public static native  String CoinID_createBTMMultAddr(String prefix, String pubkeys, int quorum);
    public static native  String CoinID_packBTMMultSigInfo(String jsonTran, String jsonWitness);
    public static native  String CoinID_getBTMMultSigSignature(String msgs, String key,boolean needSig);
    public static native  String CoinID_BTMMSSignature(String msg, String key);
    public static native  boolean CoinID_BTMMSVerify(String msg, String key, String signature);

    public static native  String CoinID_getBTCMultSigInfo(String jsonTran, String pubKeys, int quorum);
    public static native  String CoinID_createBTCMultAddr(byte prefix, String pubkeys, int quorum);
    public static native  String CoinID_packBTCMultSigInfo(String jsonTran, String jsonWitness, String pubkeys, int quorum);
    public static native  String CoinID_getBTCMultSigSignature(String msgs, String key, boolean needSig);
    public static native  String CoinID_BTCMSSignature(String msg, String key);
    public static native  boolean CoinID_BTCMSVerify(String msg, String key, String signature);

    public static native  String CoinID_serBTMMS(String jsonTran);
    public static native  String CoinID_serBTCMS(String jsonTran, String pubKeys, int quorum);
    public static native  String CoinID_filterUTXO(String utxoJson, String amount, String fee, int quorum, int num,String type);

    public static native String CoinID_getXMRAddress(String nettype,String pubSpendKey, String pubViewKey,String short_pid);
    public static native String CoinID_getXMRViewBySpend(String prvSpendKey);
    public static native String CoinID_getXMRPubByPrv(String prvKey);
    public static native String CoinID_sigtMoneroTransaction(String unspent_outsStr, String mix_outsStr, String prvSpendKey, String prvViewKey);
    public static native  String CoinID_searchXMRTX(String spdPrv, String viewPrv, String txData);
    public static native  String CoinID_CRC16_CCITT_FALSE(String input);

    public static native String CoinID_genPolkaDotKeyPairByPath(short [] mnemonicIndexBuffer, int indexLen, String path);
    public static native String CoinID_getPolkaDotAddress(byte prefix, String pubkeyStr);
    public static native String CoinID_sigPolkadotTransaction(String jsonTran, String prvKeyStr, String pubKeyStr);
    public static native String CoinID_polkadot_ept_keystore(String password, String prvKeyStr, byte prefix, String pubKeyStr);
    public static native String CoinID_polkadot_ipt_keystore(String password, String keystore);
    public static native String CoinID_getPolkaPubByPriv(String prvKeyStr);
    public static native String CoinID_polkadot_getNonceKey(String address);
}
